---

name: Build and Release
on:
  workflow_dispatch:
    inputs:
      bump:
        description: Semver level to bump
        required: true
        default: patch
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  test:
    uses: ./.github/workflows/test.yaml

  bump:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: write
    outputs:
      app: ${{ steps.new_app.outputs.new_version }}
      new_ref: ${{ steps.commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v4

      - name: Current versions
        id: version
        run: |
          echo "app=$(grep -oP '(?<=^version = ")[\w\.]+' Cargo.toml)" >> $GITHUB_OUTPUT
          echo "chart=$(grep -oP '(?<=^version: ).+' chart/Chart.yaml)" >> $GITHUB_OUTPUT

      - uses: actions-ecosystem/action-bump-semver@v1
        id: new_app
        with:
          current_version: ${{ steps.version.outputs.app }}
          level: ${{ github.event.inputs.bump }}

      - name: Update Chart.yaml and Cargo.toml
        run: |
          sed -i "s/^appVersion: .*/appVersion: ${{ steps.new_app.outputs.new_version }}/" chart/Chart.yaml
          sed -i "s/^version: .*/version: ${{ steps.new_app.outputs.new_version }}/" chart/Chart.yaml
          sed -i "s/^version = .*/version = \"${{ steps.new_app.outputs.new_version }}\"/" Cargo.toml

      - name: Commit changes
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: Bump version to ${{ steps.new_app.outputs.new_version }}
          file_pattern: Cargo.toml Cargo.lock chart/Chart.yaml

  build:
    runs-on: ubuntu-latest
    needs: bump
    permissions:
      contents: write
    strategy:
      matrix:
        target:
          - name: amd64
            triplet: x86_64-unknown-linux-gnu
          - name: aarch64
            triplet: aarch64-unknown-linux-gnu
        feature:
          - default
          - kube
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump.outputs.new_ref }}

      - run: sudo apt-get install -y gcc-aarch64-linux-gnu
        if: matrix.target.triplet == 'aarch64-unknown-linux-gnu'

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target.triplet }}
          cache: true # Sets up rust cache automatically

      - name: Compile
        run: |
          cargo build --release --target ${{ matrix.target.triplet }} --features ${{ matrix.feature }}
          cp target/${{ matrix.target.triplet }}/release/magicentry magicentry-${{ matrix.feature }}-${{ matrix.target.name }}

      - uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.feature }}-${{ matrix.target.name }}
          path: magicentry-*

  release:
    runs-on: ubuntu-latest
    needs:
      - bump
      - build
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          merge-multiple: true

      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: MagicEntry v${{ needs.bump.outputs.app }}
          tag_name: v${{ needs.bump.outputs.app }}
          target_commitish: ${{ needs.bump.outputs.new_ref }}
          generate_release_notes: true
          make_latest: true
          files: magicentry-*

  docker:
    runs-on: ubuntu-latest
    needs: bump
    strategy:
      matrix:
        feature:
          - default
          - kube
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump.outputs.new_ref }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          # org.opencontainers.image.created=
          annotations: |
            org.opencontainers.image.title=MagicEntry
            org.opencontainers.image.description=A simple identity provider for human beings
            org.opencontainers.image.vendor=dzervas
            org.opencontainers.image.authors=Dimitris Zervas <dzervas@dzervas.gr>
            org.opencontainers.image.url=https://magicentry.rs
            org.opencontainers.image.documentation=https://magicentry.rs
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ needs.bump.outputs.app }}
            org.opencontainers.image.revision=v${{ needs.bump.outputs.app }}
          tags: |
            type=sha

            type=raw,value=latest,enable=${{ matrix.feature == 'default' }}
            type=raw,value=v${{ needs.bump.outputs.app }},enable=${{ matrix.feature == 'default' }}

            type=raw,value=${{ matrix.feature }}-latest,enable=${{ matrix.feature != 'default' }}
            type=raw,value=${{ matrix.feature }}-v${{ needs.bump.outputs.app }},enable=${{ matrix.feature != 'default' }}

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            app-target
            usr-local-cargo-git-db
            usr-local-cargo-registry
          key: magicentry-docker-cache-${{ hashFiles('Dockerfile') }}

      - name: Inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "app-target": "/app/target",
              "usr-local-cargo-git-db": "/usr/local/cargo/git/db",
              "usr-local-cargo-registry": "/usr/local/cargo/registry"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Docker Build
        uses: docker/build-push-action@v6
        with:
          context: . # Otherwise it falls back to the reference this action was fired
          cache-from: type=gha,scope=magicentry-${{ matrix.feature }}
          cache-to: type=gha,mode=max,scope=magicentry-${{ matrix.feature }}
          push: true
          build-args: |
            FEATURES=${{ matrix.feature }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  chart:
    runs-on: ubuntu-latest
    needs: bump
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump.outputs.new_ref }}

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Run chart-releaser
        uses: bsord/helm-push@v4
        with:
          useOCIRegistry: true
          registry-url: oci://ghcr.io/${{ github.actor }}/charts
          username: ${{ github.actor }}
          access-token: ${{ secrets.GITHUB_TOKEN }}
          force: true
